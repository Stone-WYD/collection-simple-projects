package com.wyd.asset_manage.entity.eq.proxy;

import com.easy.query.core.expression.parser.core.available.TableAvailable;
import com.easy.query.core.proxy.AbstractProxyEntity;
import com.easy.query.core.proxy.SQLColumn;
import com.easy.query.core.proxy.SQLSelectAsExpression;
import com.easy.query.core.proxy.fetcher.AbstractFetcher;
import com.easy.query.core.proxy.core.EntitySQLContext;
import com.wyd.asset_manage.entity.eq.UserEntity;
import com.easy.query.core.proxy.columns.types.SQLLongTypeColumn;
import com.easy.query.core.proxy.columns.types.SQLStringTypeColumn;
import com.easy.query.core.proxy.columns.types.SQLIntegerTypeColumn;
import com.easy.query.core.proxy.columns.types.SQLLocalDateTimeTypeColumn;
import com.easy.query.core.proxy.columns.SQLNavigateColumn;
import com.easy.query.core.proxy.columns.types.SQLAnyTypeColumn;

/**
 * this file automatically generated by easy-query, don't modify it
 * 当前文件是easy-query自动生成的请不要随意修改
 * 如果出现属性冲突请使用@ProxyProperty进行重命名
 *
 * @author easy-query
 */
public class UserEntityProxy extends AbstractProxyEntity<UserEntityProxy, UserEntity> {

    private static final Class<UserEntity> entityClass = UserEntity.class;

    public static final UserEntityProxy TABLE = createTable().createEmpty();

    public static UserEntityProxy createTable() {
        return new UserEntityProxy();
    }

    public UserEntityProxy() {
    }

    /**
     * 主键
     * {@link UserEntity#getId}
     */
    public SQLLongTypeColumn<UserEntityProxy> id() {
        return getLongTypeColumn("id");
    }

    /**
     * 用户名
     * {@link UserEntity#getUserName}
     */
    public SQLStringTypeColumn<UserEntityProxy> userName() {
        return getStringTypeColumn("userName");
    }

    /**
     * 密码
     * {@link UserEntity#getPassword}
     */
    public SQLStringTypeColumn<UserEntityProxy> password() {
        return getStringTypeColumn("password");
    }

    /**
     * 所属法院
     * {@link UserEntity#getCourtCode}
     */
    public SQLStringTypeColumn<UserEntityProxy> courtCode() {
        return getStringTypeColumn("courtCode");
    }

    /**
     * 角色标识
     * {@link UserEntity#getRoleId}
     */
    public SQLStringTypeColumn<UserEntityProxy> roleId() {
        return getStringTypeColumn("roleId");
    }

    /**
     * 状态（0-冻结，1-可用）
     * {@link UserEntity#getStatus}
     */
    public SQLIntegerTypeColumn<UserEntityProxy> status() {
        return getIntegerTypeColumn("status");
    }

    /**
     * 创建时间
     * {@link UserEntity#getCreateTime}
     */
    public SQLLocalDateTimeTypeColumn<UserEntityProxy> createTime() {
        return getLocalDateTimeTypeColumn("createTime");
    }

    /**
     * 更新时间
     * {@link UserEntity#getUpdateTime}
     */
    public SQLLocalDateTimeTypeColumn<UserEntityProxy> updateTime() {
        return getLocalDateTimeTypeColumn("updateTime");
    }

    /**
     * 删除标记 0-删除 1-未删除
     * {@link UserEntity#getDelMark}
     */
    public SQLIntegerTypeColumn<UserEntityProxy> delMark() {
        return getIntegerTypeColumn("delMark");
    }

    /**
     * 用户角色
     * {@link UserEntity#getRoleEntity}
     */
    public com.wyd.asset_manage.entity.eq.proxy.RoleEntityProxy roleEntity() {
        return getNavigate("roleEntity", new com.wyd.asset_manage.entity.eq.proxy.RoleEntityProxy());
    }


    @Override
    public Class<UserEntity> getEntityClass() {
        return entityClass;
    }


    /**
     * 数据库列的简单获取
     *
     * @return
     */
    public UserEntityProxyFetcher FETCHER = new UserEntityProxyFetcher(this, null, SQLSelectAsExpression.empty);


    public static class UserEntityProxyFetcher extends AbstractFetcher<UserEntityProxy, UserEntity, UserEntityProxyFetcher> {

        public UserEntityProxyFetcher(UserEntityProxy proxy, UserEntityProxyFetcher prev, SQLSelectAsExpression sqlSelectAsExpression) {
            super(proxy, prev, sqlSelectAsExpression);
        }


        /**
         * 主键
         * {@link UserEntity#getId}
         */
        public UserEntityProxyFetcher id() {
            return add(getProxy().id());
        }

        /**
         * 用户名
         * {@link UserEntity#getUserName}
         */
        public UserEntityProxyFetcher userName() {
            return add(getProxy().userName());
        }

        /**
         * 密码
         * {@link UserEntity#getPassword}
         */
        public UserEntityProxyFetcher password() {
            return add(getProxy().password());
        }

        /**
         * 所属法院
         * {@link UserEntity#getCourtCode}
         */
        public UserEntityProxyFetcher courtCode() {
            return add(getProxy().courtCode());
        }

        /**
         * 角色标识
         * {@link UserEntity#getRoleId}
         */
        public UserEntityProxyFetcher roleId() {
            return add(getProxy().roleId());
        }

        /**
         * 状态（0-冻结，1-可用）
         * {@link UserEntity#getStatus}
         */
        public UserEntityProxyFetcher status() {
            return add(getProxy().status());
        }

        /**
         * 创建时间
         * {@link UserEntity#getCreateTime}
         */
        public UserEntityProxyFetcher createTime() {
            return add(getProxy().createTime());
        }

        /**
         * 更新时间
         * {@link UserEntity#getUpdateTime}
         */
        public UserEntityProxyFetcher updateTime() {
            return add(getProxy().updateTime());
        }

        /**
         * 删除标记 0-删除 1-未删除
         * {@link UserEntity#getDelMark}
         */
        public UserEntityProxyFetcher delMark() {
            return add(getProxy().delMark());
        }


        @Override
        protected UserEntityProxyFetcher createFetcher(UserEntityProxy cp, AbstractFetcher<UserEntityProxy, UserEntity, UserEntityProxyFetcher> prev, SQLSelectAsExpression sqlSelectExpression) {
            return new UserEntityProxyFetcher(cp, this, sqlSelectExpression);
        }
    }

}
