package com.wyd.asset_manage.entity.eq.proxy;

import com.easy.query.core.expression.parser.core.available.TableAvailable;
import com.easy.query.core.proxy.AbstractProxyEntity;
import com.easy.query.core.proxy.SQLColumn;
import com.easy.query.core.proxy.SQLSelectAsExpression;
import com.easy.query.core.proxy.fetcher.AbstractFetcher;
import com.easy.query.core.proxy.core.EntitySQLContext;
import com.wyd.asset_manage.entity.eq.RoleEntity;
import com.easy.query.core.proxy.columns.types.SQLLongTypeColumn;
import com.easy.query.core.proxy.columns.types.SQLStringTypeColumn;
import com.easy.query.core.proxy.columns.types.SQLLocalDateTimeTypeColumn;
import com.easy.query.core.proxy.columns.types.SQLIntegerTypeColumn;

/**
 * this file automatically generated by easy-query, don't modify it
 * 当前文件是easy-query自动生成的请不要随意修改
 * 如果出现属性冲突请使用@ProxyProperty进行重命名
 *
 * @author easy-query
 */
public class RoleEntityProxy extends AbstractProxyEntity<RoleEntityProxy, RoleEntity> {

    private static final Class<RoleEntity> entityClass = RoleEntity.class;

    public static final RoleEntityProxy TABLE = createTable().createEmpty();

    public static RoleEntityProxy createTable() {
        return new RoleEntityProxy();
    }

    public RoleEntityProxy() {
    }

    /**
     * 主键
     * {@link RoleEntity#getId}
     */
    public SQLLongTypeColumn<RoleEntityProxy> id() {
        return getLongTypeColumn("id");
    }

    /**
     * 角色名称
     * {@link RoleEntity#getRoleName}
     */
    public SQLStringTypeColumn<RoleEntityProxy> roleName() {
        return getStringTypeColumn("roleName");
    }

    /**
     * 所属法院
     * {@link RoleEntity#getCourtCode}
     */
    public SQLStringTypeColumn<RoleEntityProxy> courtCode() {
        return getStringTypeColumn("courtCode");
    }

    /**
     * 创建时间
     * {@link RoleEntity#getCreateTime}
     */
    public SQLLocalDateTimeTypeColumn<RoleEntityProxy> createTime() {
        return getLocalDateTimeTypeColumn("createTime");
    }

    /**
     * 更新时间
     * {@link RoleEntity#getUpdateTime}
     */
    public SQLLocalDateTimeTypeColumn<RoleEntityProxy> updateTime() {
        return getLocalDateTimeTypeColumn("updateTime");
    }

    /**
     * 删除标记
     * {@link RoleEntity#getDelMark}
     */
    public SQLIntegerTypeColumn<RoleEntityProxy> delMark() {
        return getIntegerTypeColumn("delMark");
    }

    /**
     * 是否超级管理员，0否，1是
     * {@link RoleEntity#getAdminMark}
     */
    public SQLIntegerTypeColumn<RoleEntityProxy> adminMark() {
        return getIntegerTypeColumn("adminMark");
    }


    @Override
    public Class<RoleEntity> getEntityClass() {
        return entityClass;
    }


    /**
     * 数据库列的简单获取
     *
     * @return
     */
    public RoleEntityProxyFetcher FETCHER = new RoleEntityProxyFetcher(this, null, SQLSelectAsExpression.empty);


    public static class RoleEntityProxyFetcher extends AbstractFetcher<RoleEntityProxy, RoleEntity, RoleEntityProxyFetcher> {

        public RoleEntityProxyFetcher(RoleEntityProxy proxy, RoleEntityProxyFetcher prev, SQLSelectAsExpression sqlSelectAsExpression) {
            super(proxy, prev, sqlSelectAsExpression);
        }


        /**
         * 主键
         * {@link RoleEntity#getId}
         */
        public RoleEntityProxyFetcher id() {
            return add(getProxy().id());
        }

        /**
         * 角色名称
         * {@link RoleEntity#getRoleName}
         */
        public RoleEntityProxyFetcher roleName() {
            return add(getProxy().roleName());
        }

        /**
         * 所属法院
         * {@link RoleEntity#getCourtCode}
         */
        public RoleEntityProxyFetcher courtCode() {
            return add(getProxy().courtCode());
        }

        /**
         * 创建时间
         * {@link RoleEntity#getCreateTime}
         */
        public RoleEntityProxyFetcher createTime() {
            return add(getProxy().createTime());
        }

        /**
         * 更新时间
         * {@link RoleEntity#getUpdateTime}
         */
        public RoleEntityProxyFetcher updateTime() {
            return add(getProxy().updateTime());
        }

        /**
         * 删除标记
         * {@link RoleEntity#getDelMark}
         */
        public RoleEntityProxyFetcher delMark() {
            return add(getProxy().delMark());
        }

        /**
         * 是否超级管理员，0否，1是
         * {@link RoleEntity#getAdminMark}
         */
        public RoleEntityProxyFetcher adminMark() {
            return add(getProxy().adminMark());
        }


        @Override
        protected RoleEntityProxyFetcher createFetcher(RoleEntityProxy cp, AbstractFetcher<RoleEntityProxy, RoleEntity, RoleEntityProxyFetcher> prev, SQLSelectAsExpression sqlSelectExpression) {
            return new RoleEntityProxyFetcher(cp, this, sqlSelectExpression);
        }
    }

}
